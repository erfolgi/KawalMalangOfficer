// Generated by Dagger (https://dagger.dev).
package com.kawal.malang.officer.presentation.account.profile;

import com.kawal.malang.officer.presentation.viewmodels.account.AccountViewModelFactory;
import com.kawal.malang.officer.presentation.viewmodels.auth.AuthViewModelFactory;
import com.kawal.malang.officer.presentation.viewmodels.patrol.PatrolViewModelFactory;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProfileFragment_MembersInjector implements MembersInjector<ProfileFragment> {
  private final Provider<AuthViewModelFactory> viewModelFactoryProvider;

  private final Provider<AccountViewModelFactory> accountFactoryProvider;

  private final Provider<PatrolViewModelFactory> patrolFactoryProvider;

  private final Provider<PatrolOfficerAdapter> patrolOfficerAdapterProvider;

  public ProfileFragment_MembersInjector(Provider<AuthViewModelFactory> viewModelFactoryProvider,
      Provider<AccountViewModelFactory> accountFactoryProvider,
      Provider<PatrolViewModelFactory> patrolFactoryProvider,
      Provider<PatrolOfficerAdapter> patrolOfficerAdapterProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
    this.accountFactoryProvider = accountFactoryProvider;
    this.patrolFactoryProvider = patrolFactoryProvider;
    this.patrolOfficerAdapterProvider = patrolOfficerAdapterProvider;
  }

  public static MembersInjector<ProfileFragment> create(
      Provider<AuthViewModelFactory> viewModelFactoryProvider,
      Provider<AccountViewModelFactory> accountFactoryProvider,
      Provider<PatrolViewModelFactory> patrolFactoryProvider,
      Provider<PatrolOfficerAdapter> patrolOfficerAdapterProvider) {
    return new ProfileFragment_MembersInjector(viewModelFactoryProvider, accountFactoryProvider, patrolFactoryProvider, patrolOfficerAdapterProvider);
  }

  @Override
  public void injectMembers(ProfileFragment instance) {
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
    injectAccountFactory(instance, accountFactoryProvider.get());
    injectPatrolFactory(instance, patrolFactoryProvider.get());
    injectPatrolOfficerAdapter(instance, patrolOfficerAdapterProvider.get());
  }

  @InjectedFieldSignature("com.kawal.malang.officer.presentation.account.profile.ProfileFragment.viewModelFactory")
  public static void injectViewModelFactory(ProfileFragment instance,
      AuthViewModelFactory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }

  @InjectedFieldSignature("com.kawal.malang.officer.presentation.account.profile.ProfileFragment.accountFactory")
  public static void injectAccountFactory(ProfileFragment instance,
      AccountViewModelFactory accountFactory) {
    instance.accountFactory = accountFactory;
  }

  @InjectedFieldSignature("com.kawal.malang.officer.presentation.account.profile.ProfileFragment.patrolFactory")
  public static void injectPatrolFactory(ProfileFragment instance,
      PatrolViewModelFactory patrolFactory) {
    instance.patrolFactory = patrolFactory;
  }

  @InjectedFieldSignature("com.kawal.malang.officer.presentation.account.profile.ProfileFragment.patrolOfficerAdapter")
  public static void injectPatrolOfficerAdapter(ProfileFragment instance,
      PatrolOfficerAdapter patrolOfficerAdapter) {
    instance.patrolOfficerAdapter = patrolOfficerAdapter;
  }
}
