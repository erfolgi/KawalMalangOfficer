// Generated by Dagger (https://dagger.dev).
package com.kawal.malang.officer.presentation;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.kawal.malang.officer.data.api.ApiService;
import com.kawal.malang.officer.data.repository.datasource.RemoteDataSource;
import com.kawal.malang.officer.domain.repository.AppRepository;
import com.kawal.malang.officer.domain.usecase.account.AccountUseCase;
import com.kawal.malang.officer.domain.usecase.auth.AuthUseCase;
import com.kawal.malang.officer.domain.usecase.briefing.BriefingUseCase;
import com.kawal.malang.officer.domain.usecase.notification.NotificationUseCase;
import com.kawal.malang.officer.domain.usecase.panic.PanicUseCase;
import com.kawal.malang.officer.domain.usecase.patrol.PatrolUseCase;
import com.kawal.malang.officer.presentation.account.edit.editCar.EditCarActivity;
import com.kawal.malang.officer.presentation.account.edit.editCar.EditCarActivity_MembersInjector;
import com.kawal.malang.officer.presentation.account.edit.editMember.EditMemberActivity;
import com.kawal.malang.officer.presentation.account.edit.editMember.EditMemberActivity_MembersInjector;
import com.kawal.malang.officer.presentation.account.edit.password.EditPasswordActivity;
import com.kawal.malang.officer.presentation.account.edit.password.EditPasswordActivity_MembersInjector;
import com.kawal.malang.officer.presentation.account.profile.PatrolOfficerAdapter;
import com.kawal.malang.officer.presentation.account.profile.ProfileFragment;
import com.kawal.malang.officer.presentation.account.profile.ProfileFragment_MembersInjector;
import com.kawal.malang.officer.presentation.adapter.ReportCategoryAdapter;
import com.kawal.malang.officer.presentation.auth.login.LoginActivity;
import com.kawal.malang.officer.presentation.auth.login.LoginActivity_MembersInjector;
import com.kawal.malang.officer.presentation.briefing.create.CreateBriefingActivity;
import com.kawal.malang.officer.presentation.briefing.create.CreateBriefingActivity_MembersInjector;
import com.kawal.malang.officer.presentation.briefing.detail.DetailBriefingActivity;
import com.kawal.malang.officer.presentation.briefing.detail.DetailBriefingActivity_MembersInjector;
import com.kawal.malang.officer.presentation.briefing.list.BriefingListAdapter;
import com.kawal.malang.officer.presentation.briefing.list.BriefingListFragment;
import com.kawal.malang.officer.presentation.briefing.list.BriefingListFragment_MembersInjector;
import com.kawal.malang.officer.presentation.di.AdapterModule;
import com.kawal.malang.officer.presentation.di.AdapterModule_ProvideBriefingListAdapterFactory;
import com.kawal.malang.officer.presentation.di.AdapterModule_ProvideDetailOfficerAdapterFactory;
import com.kawal.malang.officer.presentation.di.AdapterModule_ProvideNotificationAdapterFactory;
import com.kawal.malang.officer.presentation.di.AdapterModule_ProvidePanicOfficerAdapterFactory;
import com.kawal.malang.officer.presentation.di.AdapterModule_ProvidePatrolHistoryAdapterFactory;
import com.kawal.malang.officer.presentation.di.AdapterModule_ProvidePatrolOfficerAdapterFactory;
import com.kawal.malang.officer.presentation.di.AdapterModule_ProvidePoliceCarAdapterFactory;
import com.kawal.malang.officer.presentation.di.AdapterModule_ProvideReportCategoryAdapterFactory;
import com.kawal.malang.officer.presentation.di.AdapterModule_ProvideReportListAdapterFactory;
import com.kawal.malang.officer.presentation.di.AdapterModule_ProvideTimelineAdapterFactory;
import com.kawal.malang.officer.presentation.di.FactoryModule;
import com.kawal.malang.officer.presentation.di.FactoryModule_ProvideAccountFactoryFactory;
import com.kawal.malang.officer.presentation.di.FactoryModule_ProvideAuthFactoryFactory;
import com.kawal.malang.officer.presentation.di.FactoryModule_ProvideBriefingFactoryFactory;
import com.kawal.malang.officer.presentation.di.FactoryModule_ProvideNotificationFactoryFactory;
import com.kawal.malang.officer.presentation.di.FactoryModule_ProvidePanicFactoryFactory;
import com.kawal.malang.officer.presentation.di.FactoryModule_ProvidePatrolFactoryFactory;
import com.kawal.malang.officer.presentation.di.NetModule;
import com.kawal.malang.officer.presentation.di.NetModule_ProvideApiServiceFactory;
import com.kawal.malang.officer.presentation.di.NetModule_ProvideRetrofitFactory;
import com.kawal.malang.officer.presentation.di.RemoteDataModule;
import com.kawal.malang.officer.presentation.di.RemoteDataModule_ProvideRemoteDataSourceFactory;
import com.kawal.malang.officer.presentation.di.RepositoryModule;
import com.kawal.malang.officer.presentation.di.RepositoryModule_ProvideAppRepositoryFactory;
import com.kawal.malang.officer.presentation.di.UseCaseModule;
import com.kawal.malang.officer.presentation.di.UseCaseModule_ProvideAccountUseCaseFactory;
import com.kawal.malang.officer.presentation.di.UseCaseModule_ProvideAuthUseCaseFactory;
import com.kawal.malang.officer.presentation.di.UseCaseModule_ProvideBriefingUseCaseFactory;
import com.kawal.malang.officer.presentation.di.UseCaseModule_ProvideNotificationUseCaseFactory;
import com.kawal.malang.officer.presentation.di.UseCaseModule_ProvidePanicUseCaseFactory;
import com.kawal.malang.officer.presentation.di.UseCaseModule_ProvidePatrolUseCaseFactory;
import com.kawal.malang.officer.presentation.notification.NotificationAdapter;
import com.kawal.malang.officer.presentation.notification.NotificationFragment;
import com.kawal.malang.officer.presentation.notification.NotificationFragment_MembersInjector;
import com.kawal.malang.officer.presentation.panicevent.PanicEventFragment;
import com.kawal.malang.officer.presentation.panicevent.PanicEventFragment_MembersInjector;
import com.kawal.malang.officer.presentation.panicevent.PanicOfficerAdapter;
import com.kawal.malang.officer.presentation.panicevent.TimelineAdapter;
import com.kawal.malang.officer.presentation.patrol.history.PatrolHistoryActivity;
import com.kawal.malang.officer.presentation.patrol.history.PatrolHistoryActivity_MembersInjector;
import com.kawal.malang.officer.presentation.patrol.history.PatrolHistoryAdapter;
import com.kawal.malang.officer.presentation.report.detail.DetailOfficerAdapter;
import com.kawal.malang.officer.presentation.report.detail.DetailReportActivity;
import com.kawal.malang.officer.presentation.report.detail.DetailReportActivity_MembersInjector;
import com.kawal.malang.officer.presentation.report.detail.PoliceCarAdapter;
import com.kawal.malang.officer.presentation.report.list.ReportListAdapter;
import com.kawal.malang.officer.presentation.report.list.ReportListFragment;
import com.kawal.malang.officer.presentation.report.list.ReportListFragment_MembersInjector;
import com.kawal.malang.officer.presentation.report.panicHistory.PanicHistoryActivity;
import com.kawal.malang.officer.presentation.report.panicHistory.PanicHistoryActivity_MembersInjector;
import com.kawal.malang.officer.presentation.viewmodels.account.AccountViewModelFactory;
import com.kawal.malang.officer.presentation.viewmodels.auth.AuthViewModelFactory;
import com.kawal.malang.officer.presentation.viewmodels.briefing.BriefingViewModelFactory;
import com.kawal.malang.officer.presentation.viewmodels.notification.NotificationViewModelFactory;
import com.kawal.malang.officer.presentation.viewmodels.panic.PanicViewModelFactory;
import com.kawal.malang.officer.presentation.viewmodels.patrol.PatrolViewModelFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerOfficerApplication_HiltComponents_SingletonC extends OfficerApplication_HiltComponents.SingletonC {
  private final FactoryModule factoryModule;

  private final ApplicationContextModule applicationContextModule;

  private final UseCaseModule useCaseModule;

  private final RepositoryModule repositoryModule;

  private final RemoteDataModule remoteDataModule;

  private final NetModule netModule;

  private final AdapterModule adapterModule;

  private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private Provider<RemoteDataSource> provideRemoteDataSourceProvider;

  private Provider<AppRepository> provideAppRepositoryProvider;

  private Provider<AccountUseCase> provideAccountUseCaseProvider;

  private Provider<AccountViewModelFactory> provideAccountFactoryProvider;

  private Provider<AuthUseCase> provideAuthUseCaseProvider;

  private Provider<AuthViewModelFactory> provideAuthFactoryProvider;

  private Provider<BriefingUseCase> provideBriefingUseCaseProvider;

  private Provider<BriefingViewModelFactory> provideBriefingFactoryProvider;

  private Provider<ReportCategoryAdapter> provideReportCategoryAdapterProvider;

  private Provider<PatrolUseCase> providePatrolUseCaseProvider;

  private Provider<PatrolViewModelFactory> providePatrolFactoryProvider;

  private Provider<PatrolHistoryAdapter> providePatrolHistoryAdapterProvider;

  private Provider<PanicOfficerAdapter> providePanicOfficerAdapterProvider;

  private Provider<PoliceCarAdapter> providePoliceCarAdapterProvider;

  private Provider<DetailOfficerAdapter> provideDetailOfficerAdapterProvider;

  private Provider<PanicUseCase> providePanicUseCaseProvider;

  private Provider<PanicViewModelFactory> providePanicFactoryProvider;

  private Provider<TimelineAdapter> provideTimelineAdapterProvider;

  private Provider<ReportListAdapter> provideReportListAdapterProvider;

  private Provider<PatrolOfficerAdapter> providePatrolOfficerAdapterProvider;

  private Provider<BriefingListAdapter> provideBriefingListAdapterProvider;

  private Provider<NotificationAdapter> provideNotificationAdapterProvider;

  private Provider<NotificationUseCase> provideNotificationUseCaseProvider;

  private Provider<NotificationViewModelFactory> provideNotificationFactoryProvider;

  private DaggerOfficerApplication_HiltComponents_SingletonC(AdapterModule adapterModuleParam,
      ApplicationContextModule applicationContextModuleParam, FactoryModule factoryModuleParam,
      NetModule netModuleParam, RemoteDataModule remoteDataModuleParam,
      RepositoryModule repositoryModuleParam, UseCaseModule useCaseModuleParam) {
    this.factoryModule = factoryModuleParam;
    this.applicationContextModule = applicationContextModuleParam;
    this.useCaseModule = useCaseModuleParam;
    this.repositoryModule = repositoryModuleParam;
    this.remoteDataModule = remoteDataModuleParam;
    this.netModule = netModuleParam;
    this.adapterModule = adapterModuleParam;
    initialize(adapterModuleParam, applicationContextModuleParam, factoryModuleParam, netModuleParam, remoteDataModuleParam, repositoryModuleParam, useCaseModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private ApiService apiService() {
    return NetModule_ProvideApiServiceFactory.provideApiService(netModule, provideRetrofitProvider.get());
  }

  private RemoteDataSource remoteDataSource() {
    return RemoteDataModule_ProvideRemoteDataSourceFactory.provideRemoteDataSource(remoteDataModule, provideApiServiceProvider.get());
  }

  private AppRepository appRepository() {
    return RepositoryModule_ProvideAppRepositoryFactory.provideAppRepository(repositoryModule, provideRemoteDataSourceProvider.get());
  }

  private AccountUseCase accountUseCase() {
    return UseCaseModule_ProvideAccountUseCaseFactory.provideAccountUseCase(useCaseModule, provideAppRepositoryProvider.get());
  }

  private AccountViewModelFactory accountViewModelFactory() {
    return FactoryModule_ProvideAccountFactoryFactory.provideAccountFactory(factoryModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), provideAccountUseCaseProvider.get());
  }

  private AuthUseCase authUseCase() {
    return UseCaseModule_ProvideAuthUseCaseFactory.provideAuthUseCase(useCaseModule, provideAppRepositoryProvider.get());
  }

  private AuthViewModelFactory authViewModelFactory() {
    return FactoryModule_ProvideAuthFactoryFactory.provideAuthFactory(factoryModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), provideAuthUseCaseProvider.get());
  }

  private BriefingUseCase briefingUseCase() {
    return UseCaseModule_ProvideBriefingUseCaseFactory.provideBriefingUseCase(useCaseModule, provideAppRepositoryProvider.get());
  }

  private BriefingViewModelFactory briefingViewModelFactory() {
    return FactoryModule_ProvideBriefingFactoryFactory.provideBriefingFactory(factoryModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), provideBriefingUseCaseProvider.get());
  }

  private PatrolUseCase patrolUseCase() {
    return UseCaseModule_ProvidePatrolUseCaseFactory.providePatrolUseCase(useCaseModule, provideAppRepositoryProvider.get());
  }

  private PatrolViewModelFactory patrolViewModelFactory() {
    return FactoryModule_ProvidePatrolFactoryFactory.providePatrolFactory(factoryModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), providePatrolUseCaseProvider.get());
  }

  private PanicUseCase panicUseCase() {
    return UseCaseModule_ProvidePanicUseCaseFactory.providePanicUseCase(useCaseModule, provideAppRepositoryProvider.get());
  }

  private PanicViewModelFactory panicViewModelFactory() {
    return FactoryModule_ProvidePanicFactoryFactory.providePanicFactory(factoryModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), providePanicUseCaseProvider.get());
  }

  private NotificationUseCase notificationUseCase() {
    return UseCaseModule_ProvideNotificationUseCaseFactory.provideNotificationUseCase(useCaseModule, provideAppRepositoryProvider.get());
  }

  private NotificationViewModelFactory notificationViewModelFactory() {
    return FactoryModule_ProvideNotificationFactoryFactory.provideNotificationFactory(factoryModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule), provideNotificationUseCaseProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AdapterModule adapterModuleParam,
      final ApplicationContextModule applicationContextModuleParam,
      final FactoryModule factoryModuleParam, final NetModule netModuleParam,
      final RemoteDataModule remoteDataModuleParam, final RepositoryModule repositoryModuleParam,
      final UseCaseModule useCaseModuleParam) {
    this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonC, 5));
    this.provideApiServiceProvider = DoubleCheck.provider(new SwitchingProvider<ApiService>(singletonC, 4));
    this.provideRemoteDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<RemoteDataSource>(singletonC, 3));
    this.provideAppRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<AppRepository>(singletonC, 2));
    this.provideAccountUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<AccountUseCase>(singletonC, 1));
    this.provideAccountFactoryProvider = DoubleCheck.provider(new SwitchingProvider<AccountViewModelFactory>(singletonC, 0));
    this.provideAuthUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<AuthUseCase>(singletonC, 7));
    this.provideAuthFactoryProvider = DoubleCheck.provider(new SwitchingProvider<AuthViewModelFactory>(singletonC, 6));
    this.provideBriefingUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<BriefingUseCase>(singletonC, 9));
    this.provideBriefingFactoryProvider = DoubleCheck.provider(new SwitchingProvider<BriefingViewModelFactory>(singletonC, 8));
    this.provideReportCategoryAdapterProvider = DoubleCheck.provider(new SwitchingProvider<ReportCategoryAdapter>(singletonC, 10));
    this.providePatrolUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<PatrolUseCase>(singletonC, 12));
    this.providePatrolFactoryProvider = DoubleCheck.provider(new SwitchingProvider<PatrolViewModelFactory>(singletonC, 11));
    this.providePatrolHistoryAdapterProvider = DoubleCheck.provider(new SwitchingProvider<PatrolHistoryAdapter>(singletonC, 13));
    this.providePanicOfficerAdapterProvider = DoubleCheck.provider(new SwitchingProvider<PanicOfficerAdapter>(singletonC, 14));
    this.providePoliceCarAdapterProvider = DoubleCheck.provider(new SwitchingProvider<PoliceCarAdapter>(singletonC, 15));
    this.provideDetailOfficerAdapterProvider = DoubleCheck.provider(new SwitchingProvider<DetailOfficerAdapter>(singletonC, 16));
    this.providePanicUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<PanicUseCase>(singletonC, 18));
    this.providePanicFactoryProvider = DoubleCheck.provider(new SwitchingProvider<PanicViewModelFactory>(singletonC, 17));
    this.provideTimelineAdapterProvider = DoubleCheck.provider(new SwitchingProvider<TimelineAdapter>(singletonC, 19));
    this.provideReportListAdapterProvider = DoubleCheck.provider(new SwitchingProvider<ReportListAdapter>(singletonC, 20));
    this.providePatrolOfficerAdapterProvider = DoubleCheck.provider(new SwitchingProvider<PatrolOfficerAdapter>(singletonC, 21));
    this.provideBriefingListAdapterProvider = DoubleCheck.provider(new SwitchingProvider<BriefingListAdapter>(singletonC, 22));
    this.provideNotificationAdapterProvider = DoubleCheck.provider(new SwitchingProvider<NotificationAdapter>(singletonC, 23));
    this.provideNotificationUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<NotificationUseCase>(singletonC, 25));
    this.provideNotificationFactoryProvider = DoubleCheck.provider(new SwitchingProvider<NotificationViewModelFactory>(singletonC, 24));
  }

  @Override
  public void injectOfficerApplication(OfficerApplication officerApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private AdapterModule adapterModule;

    private ApplicationContextModule applicationContextModule;

    private FactoryModule factoryModule;

    private NetModule netModule;

    private RemoteDataModule remoteDataModule;

    private RepositoryModule repositoryModule;

    private UseCaseModule useCaseModule;

    private Builder() {
    }

    public Builder adapterModule(AdapterModule adapterModule) {
      this.adapterModule = Preconditions.checkNotNull(adapterModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder factoryModule(FactoryModule factoryModule) {
      this.factoryModule = Preconditions.checkNotNull(factoryModule);
      return this;
    }

    public Builder netModule(NetModule netModule) {
      this.netModule = Preconditions.checkNotNull(netModule);
      return this;
    }

    public Builder remoteDataModule(RemoteDataModule remoteDataModule) {
      this.remoteDataModule = Preconditions.checkNotNull(remoteDataModule);
      return this;
    }

    public Builder repositoryModule(RepositoryModule repositoryModule) {
      this.repositoryModule = Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public Builder useCaseModule(UseCaseModule useCaseModule) {
      this.useCaseModule = Preconditions.checkNotNull(useCaseModule);
      return this;
    }

    public OfficerApplication_HiltComponents.SingletonC build() {
      if (adapterModule == null) {
        this.adapterModule = new AdapterModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (factoryModule == null) {
        this.factoryModule = new FactoryModule();
      }
      if (netModule == null) {
        this.netModule = new NetModule();
      }
      if (remoteDataModule == null) {
        this.remoteDataModule = new RemoteDataModule();
      }
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      if (useCaseModule == null) {
        this.useCaseModule = new UseCaseModule();
      }
      return new DaggerOfficerApplication_HiltComponents_SingletonC(adapterModule, applicationContextModule, factoryModule, netModule, remoteDataModule, repositoryModule, useCaseModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements OfficerApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(
        DaggerOfficerApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public OfficerApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements OfficerApplication_HiltComponents.ActivityC.Builder {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public OfficerApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements OfficerApplication_HiltComponents.FragmentC.Builder {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public OfficerApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements OfficerApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public OfficerApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements OfficerApplication_HiltComponents.ViewC.Builder {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public OfficerApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements OfficerApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public OfficerApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements OfficerApplication_HiltComponents.ServiceC.Builder {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerOfficerApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public OfficerApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends OfficerApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends OfficerApplication_HiltComponents.FragmentC {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectProfileFragment(ProfileFragment arg0) {
      injectProfileFragment2(arg0);
    }

    @Override
    public void injectBriefingListFragment(BriefingListFragment arg0) {
      injectBriefingListFragment2(arg0);
    }

    @Override
    public void injectNotificationFragment(NotificationFragment arg0) {
      injectNotificationFragment2(arg0);
    }

    @Override
    public void injectPanicEventFragment(PanicEventFragment arg0) {
      injectPanicEventFragment2(arg0);
    }

    @Override
    public void injectReportListFragment(ReportListFragment arg0) {
      injectReportListFragment2(arg0);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private ProfileFragment injectProfileFragment2(ProfileFragment instance) {
      ProfileFragment_MembersInjector.injectViewModelFactory(instance, singletonC.provideAuthFactoryProvider.get());
      ProfileFragment_MembersInjector.injectAccountFactory(instance, singletonC.provideAccountFactoryProvider.get());
      ProfileFragment_MembersInjector.injectPatrolFactory(instance, singletonC.providePatrolFactoryProvider.get());
      ProfileFragment_MembersInjector.injectPatrolOfficerAdapter(instance, singletonC.providePatrolOfficerAdapterProvider.get());
      return instance;
    }

    private BriefingListFragment injectBriefingListFragment2(BriefingListFragment instance) {
      BriefingListFragment_MembersInjector.injectAdapter(instance, singletonC.provideBriefingListAdapterProvider.get());
      BriefingListFragment_MembersInjector.injectReportCategoryAdapter(instance, singletonC.provideReportCategoryAdapterProvider.get());
      BriefingListFragment_MembersInjector.injectViewModelFactory(instance, singletonC.provideBriefingFactoryProvider.get());
      return instance;
    }

    private NotificationFragment injectNotificationFragment2(NotificationFragment instance) {
      NotificationFragment_MembersInjector.injectAdapter(instance, singletonC.provideNotificationAdapterProvider.get());
      NotificationFragment_MembersInjector.injectFactory(instance, singletonC.provideNotificationFactoryProvider.get());
      return instance;
    }

    private PanicEventFragment injectPanicEventFragment2(PanicEventFragment instance) {
      PanicEventFragment_MembersInjector.injectAdapter(instance, singletonC.providePanicOfficerAdapterProvider.get());
      PanicEventFragment_MembersInjector.injectFactory(instance, singletonC.providePanicFactoryProvider.get());
      return instance;
    }

    private ReportListFragment injectReportListFragment2(ReportListFragment instance) {
      ReportListFragment_MembersInjector.injectAdapter(instance, singletonC.provideReportListAdapterProvider.get());
      ReportListFragment_MembersInjector.injectViewModelFactory(instance, singletonC.providePanicFactoryProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends OfficerApplication_HiltComponents.ViewC {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends OfficerApplication_HiltComponents.ActivityC {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectDashboardActivity(DashboardActivity arg0) {
    }

    @Override
    public void injectEditCarActivity(EditCarActivity arg0) {
      injectEditCarActivity2(arg0);
    }

    @Override
    public void injectEditMemberActivity(EditMemberActivity arg0) {
      injectEditMemberActivity2(arg0);
    }

    @Override
    public void injectEditPasswordActivity(EditPasswordActivity arg0) {
      injectEditPasswordActivity2(arg0);
    }

    @Override
    public void injectLoginActivity(LoginActivity loginActivity) {
      injectLoginActivity2(loginActivity);
    }

    @Override
    public void injectCreateBriefingActivity(CreateBriefingActivity arg0) {
      injectCreateBriefingActivity2(arg0);
    }

    @Override
    public void injectDetailBriefingActivity(DetailBriefingActivity arg0) {
      injectDetailBriefingActivity2(arg0);
    }

    @Override
    public void injectPatrolHistoryActivity(PatrolHistoryActivity arg0) {
      injectPatrolHistoryActivity2(arg0);
    }

    @Override
    public void injectDetailReportActivity(DetailReportActivity arg0) {
      injectDetailReportActivity2(arg0);
    }

    @Override
    public void injectPanicHistoryActivity(PanicHistoryActivity arg0) {
      injectPanicHistoryActivity2(arg0);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), Collections.<String>emptySet(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return Collections.<String>emptySet();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    private EditCarActivity injectEditCarActivity2(EditCarActivity instance) {
      EditCarActivity_MembersInjector.injectFactory(instance, singletonC.provideAccountFactoryProvider.get());
      return instance;
    }

    private EditMemberActivity injectEditMemberActivity2(EditMemberActivity instance) {
      EditMemberActivity_MembersInjector.injectFactory(instance, singletonC.provideAccountFactoryProvider.get());
      return instance;
    }

    private EditPasswordActivity injectEditPasswordActivity2(EditPasswordActivity instance) {
      EditPasswordActivity_MembersInjector.injectFactory(instance, singletonC.provideAccountFactoryProvider.get());
      return instance;
    }

    private LoginActivity injectLoginActivity2(LoginActivity instance) {
      LoginActivity_MembersInjector.injectViewModelFactory(instance, singletonC.provideAuthFactoryProvider.get());
      return instance;
    }

    private CreateBriefingActivity injectCreateBriefingActivity2(CreateBriefingActivity instance) {
      CreateBriefingActivity_MembersInjector.injectFactory(instance, singletonC.provideBriefingFactoryProvider.get());
      CreateBriefingActivity_MembersInjector.injectReportCategoryAdapter(instance, singletonC.provideReportCategoryAdapterProvider.get());
      return instance;
    }

    private DetailBriefingActivity injectDetailBriefingActivity2(DetailBriefingActivity instance) {
      DetailBriefingActivity_MembersInjector.injectFactory(instance, singletonC.provideBriefingFactoryProvider.get());
      return instance;
    }

    private PatrolHistoryActivity injectPatrolHistoryActivity2(PatrolHistoryActivity instance) {
      PatrolHistoryActivity_MembersInjector.injectFactory(instance, singletonC.providePatrolFactoryProvider.get());
      PatrolHistoryActivity_MembersInjector.injectPatrolAdapter(instance, singletonC.providePatrolHistoryAdapterProvider.get());
      PatrolHistoryActivity_MembersInjector.injectOfficerAdapter(instance, singletonC.providePanicOfficerAdapterProvider.get());
      return instance;
    }

    private DetailReportActivity injectDetailReportActivity2(DetailReportActivity instance) {
      DetailReportActivity_MembersInjector.injectPoliceCarAdapter(instance, singletonC.providePoliceCarAdapterProvider.get());
      DetailReportActivity_MembersInjector.injectDetailOfficerAdapter(instance, singletonC.provideDetailOfficerAdapterProvider.get());
      DetailReportActivity_MembersInjector.injectViewModelFactory(instance, singletonC.providePanicFactoryProvider.get());
      DetailReportActivity_MembersInjector.injectTimelineAdapter(instance, singletonC.provideTimelineAdapterProvider.get());
      return instance;
    }

    private PanicHistoryActivity injectPanicHistoryActivity2(PanicHistoryActivity instance) {
      PanicHistoryActivity_MembersInjector.injectAdapter(instance, singletonC.provideReportListAdapterProvider.get());
      PanicHistoryActivity_MembersInjector.injectReportCategoryAdapter(instance, singletonC.provideReportCategoryAdapterProvider.get());
      PanicHistoryActivity_MembersInjector.injectViewModelFactory(instance, singletonC.providePanicFactoryProvider.get());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends OfficerApplication_HiltComponents.ViewModelC {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private ViewModelCImpl(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return Collections.<String, Provider<ViewModel>>emptyMap();
    }
  }

  private static final class ActivityRetainedCImpl extends OfficerApplication_HiltComponents.ActivityRetainedC {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerOfficerApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends OfficerApplication_HiltComponents.ServiceC {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerOfficerApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerOfficerApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerOfficerApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.kawal.malang.officer.presentation.viewmodels.account.AccountViewModelFactory 
        return (T) singletonC.accountViewModelFactory();

        case 1: // com.kawal.malang.officer.domain.usecase.account.AccountUseCase 
        return (T) singletonC.accountUseCase();

        case 2: // com.kawal.malang.officer.domain.repository.AppRepository 
        return (T) singletonC.appRepository();

        case 3: // com.kawal.malang.officer.data.repository.datasource.RemoteDataSource 
        return (T) singletonC.remoteDataSource();

        case 4: // com.kawal.malang.officer.data.api.ApiService 
        return (T) singletonC.apiService();

        case 5: // retrofit2.Retrofit 
        return (T) NetModule_ProvideRetrofitFactory.provideRetrofit(singletonC.netModule);

        case 6: // com.kawal.malang.officer.presentation.viewmodels.auth.AuthViewModelFactory 
        return (T) singletonC.authViewModelFactory();

        case 7: // com.kawal.malang.officer.domain.usecase.auth.AuthUseCase 
        return (T) singletonC.authUseCase();

        case 8: // com.kawal.malang.officer.presentation.viewmodels.briefing.BriefingViewModelFactory 
        return (T) singletonC.briefingViewModelFactory();

        case 9: // com.kawal.malang.officer.domain.usecase.briefing.BriefingUseCase 
        return (T) singletonC.briefingUseCase();

        case 10: // com.kawal.malang.officer.presentation.adapter.ReportCategoryAdapter 
        return (T) AdapterModule_ProvideReportCategoryAdapterFactory.provideReportCategoryAdapter(singletonC.adapterModule);

        case 11: // com.kawal.malang.officer.presentation.viewmodels.patrol.PatrolViewModelFactory 
        return (T) singletonC.patrolViewModelFactory();

        case 12: // com.kawal.malang.officer.domain.usecase.patrol.PatrolUseCase 
        return (T) singletonC.patrolUseCase();

        case 13: // com.kawal.malang.officer.presentation.patrol.history.PatrolHistoryAdapter 
        return (T) AdapterModule_ProvidePatrolHistoryAdapterFactory.providePatrolHistoryAdapter(singletonC.adapterModule);

        case 14: // com.kawal.malang.officer.presentation.panicevent.PanicOfficerAdapter 
        return (T) AdapterModule_ProvidePanicOfficerAdapterFactory.providePanicOfficerAdapter(singletonC.adapterModule);

        case 15: // com.kawal.malang.officer.presentation.report.detail.PoliceCarAdapter 
        return (T) AdapterModule_ProvidePoliceCarAdapterFactory.providePoliceCarAdapter(singletonC.adapterModule);

        case 16: // com.kawal.malang.officer.presentation.report.detail.DetailOfficerAdapter 
        return (T) AdapterModule_ProvideDetailOfficerAdapterFactory.provideDetailOfficerAdapter(singletonC.adapterModule);

        case 17: // com.kawal.malang.officer.presentation.viewmodels.panic.PanicViewModelFactory 
        return (T) singletonC.panicViewModelFactory();

        case 18: // com.kawal.malang.officer.domain.usecase.panic.PanicUseCase 
        return (T) singletonC.panicUseCase();

        case 19: // com.kawal.malang.officer.presentation.panicevent.TimelineAdapter 
        return (T) AdapterModule_ProvideTimelineAdapterFactory.provideTimelineAdapter(singletonC.adapterModule);

        case 20: // com.kawal.malang.officer.presentation.report.list.ReportListAdapter 
        return (T) AdapterModule_ProvideReportListAdapterFactory.provideReportListAdapter(singletonC.adapterModule);

        case 21: // com.kawal.malang.officer.presentation.account.profile.PatrolOfficerAdapter 
        return (T) AdapterModule_ProvidePatrolOfficerAdapterFactory.providePatrolOfficerAdapter(singletonC.adapterModule);

        case 22: // com.kawal.malang.officer.presentation.briefing.list.BriefingListAdapter 
        return (T) AdapterModule_ProvideBriefingListAdapterFactory.provideBriefingListAdapter(singletonC.adapterModule);

        case 23: // com.kawal.malang.officer.presentation.notification.NotificationAdapter 
        return (T) AdapterModule_ProvideNotificationAdapterFactory.provideNotificationAdapter(singletonC.adapterModule);

        case 24: // com.kawal.malang.officer.presentation.viewmodels.notification.NotificationViewModelFactory 
        return (T) singletonC.notificationViewModelFactory();

        case 25: // com.kawal.malang.officer.domain.usecase.notification.NotificationUseCase 
        return (T) singletonC.notificationUseCase();

        default: throw new AssertionError(id);
      }
    }
  }
}
