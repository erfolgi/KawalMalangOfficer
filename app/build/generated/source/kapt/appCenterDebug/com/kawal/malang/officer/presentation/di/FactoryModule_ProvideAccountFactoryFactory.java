// Generated by Dagger (https://dagger.dev).
package com.kawal.malang.officer.presentation.di;

import android.app.Application;
import com.kawal.malang.officer.domain.usecase.account.AccountUseCase;
import com.kawal.malang.officer.presentation.viewmodels.account.AccountViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FactoryModule_ProvideAccountFactoryFactory implements Factory<AccountViewModelFactory> {
  private final FactoryModule module;

  private final Provider<Application> appProvider;

  private final Provider<AccountUseCase> useCaseProvider;

  public FactoryModule_ProvideAccountFactoryFactory(FactoryModule module,
      Provider<Application> appProvider, Provider<AccountUseCase> useCaseProvider) {
    this.module = module;
    this.appProvider = appProvider;
    this.useCaseProvider = useCaseProvider;
  }

  @Override
  public AccountViewModelFactory get() {
    return provideAccountFactory(module, appProvider.get(), useCaseProvider.get());
  }

  public static FactoryModule_ProvideAccountFactoryFactory create(FactoryModule module,
      Provider<Application> appProvider, Provider<AccountUseCase> useCaseProvider) {
    return new FactoryModule_ProvideAccountFactoryFactory(module, appProvider, useCaseProvider);
  }

  public static AccountViewModelFactory provideAccountFactory(FactoryModule instance,
      Application app, AccountUseCase useCase) {
    return Preconditions.checkNotNullFromProvides(instance.provideAccountFactory(app, useCase));
  }
}
