// Generated by Dagger (https://dagger.dev).
package com.kawal.malang.officer.presentation.di;

import com.kawal.malang.officer.data.api.ApiService;
import com.kawal.malang.officer.data.repository.datasource.RemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteDataModule_ProvideRemoteDataSourceFactory implements Factory<RemoteDataSource> {
  private final RemoteDataModule module;

  private final Provider<ApiService> serviceProvider;

  public RemoteDataModule_ProvideRemoteDataSourceFactory(RemoteDataModule module,
      Provider<ApiService> serviceProvider) {
    this.module = module;
    this.serviceProvider = serviceProvider;
  }

  @Override
  public RemoteDataSource get() {
    return provideRemoteDataSource(module, serviceProvider.get());
  }

  public static RemoteDataModule_ProvideRemoteDataSourceFactory create(RemoteDataModule module,
      Provider<ApiService> serviceProvider) {
    return new RemoteDataModule_ProvideRemoteDataSourceFactory(module, serviceProvider);
  }

  public static RemoteDataSource provideRemoteDataSource(RemoteDataModule instance,
      ApiService service) {
    return Preconditions.checkNotNullFromProvides(instance.provideRemoteDataSource(service));
  }
}
