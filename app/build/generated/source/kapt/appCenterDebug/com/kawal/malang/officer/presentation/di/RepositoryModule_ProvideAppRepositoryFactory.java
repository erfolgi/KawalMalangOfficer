// Generated by Dagger (https://dagger.dev).
package com.kawal.malang.officer.presentation.di;

import com.kawal.malang.officer.data.repository.datasource.RemoteDataSource;
import com.kawal.malang.officer.domain.repository.AppRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideAppRepositoryFactory implements Factory<AppRepository> {
  private final RepositoryModule module;

  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  public RepositoryModule_ProvideAppRepositoryFactory(RepositoryModule module,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    this.module = module;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public AppRepository get() {
    return provideAppRepository(module, remoteDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideAppRepositoryFactory create(RepositoryModule module,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    return new RepositoryModule_ProvideAppRepositoryFactory(module, remoteDataSourceProvider);
  }

  public static AppRepository provideAppRepository(RepositoryModule instance,
      RemoteDataSource remoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideAppRepository(remoteDataSource));
  }
}
