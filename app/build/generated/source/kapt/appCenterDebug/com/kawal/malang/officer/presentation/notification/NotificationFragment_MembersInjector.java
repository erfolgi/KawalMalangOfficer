// Generated by Dagger (https://dagger.dev).
package com.kawal.malang.officer.presentation.notification;

import com.kawal.malang.officer.presentation.viewmodels.notification.NotificationViewModelFactory;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NotificationFragment_MembersInjector implements MembersInjector<NotificationFragment> {
  private final Provider<NotificationAdapter> adapterProvider;

  private final Provider<NotificationViewModelFactory> factoryProvider;

  public NotificationFragment_MembersInjector(Provider<NotificationAdapter> adapterProvider,
      Provider<NotificationViewModelFactory> factoryProvider) {
    this.adapterProvider = adapterProvider;
    this.factoryProvider = factoryProvider;
  }

  public static MembersInjector<NotificationFragment> create(
      Provider<NotificationAdapter> adapterProvider,
      Provider<NotificationViewModelFactory> factoryProvider) {
    return new NotificationFragment_MembersInjector(adapterProvider, factoryProvider);
  }

  @Override
  public void injectMembers(NotificationFragment instance) {
    injectAdapter(instance, adapterProvider.get());
    injectFactory(instance, factoryProvider.get());
  }

  @InjectedFieldSignature("com.kawal.malang.officer.presentation.notification.NotificationFragment.adapter")
  public static void injectAdapter(NotificationFragment instance, NotificationAdapter adapter) {
    instance.adapter = adapter;
  }

  @InjectedFieldSignature("com.kawal.malang.officer.presentation.notification.NotificationFragment.factory")
  public static void injectFactory(NotificationFragment instance,
      NotificationViewModelFactory factory) {
    instance.factory = factory;
  }
}
